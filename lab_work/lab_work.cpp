#include <iostream>
#include <locale>

#include "delivery_lab_work.h" // Подключаем созданный нами класс
#include "Student_Lab_Work.h" // Подкючаем производный класс
#include "Interface_Lab_Work.h" // Подключаем класс интерфейса
#include "Shablone_Lab.h"

using namespace std;

enum Discipline { mathematic, programing, informatic }; // enum для Дисциплин
enum Difficult { easy, medium, hard }; // enum для сложностей

int main()
{
	
	setlocale(LC_ALL, "rus");
	
	const int count_lab = 6; // Кол-во лабораторных работ, константа для создания массива
	int difficulty_lab_work[count_lab] = { easy, easy, hard, medium, medium, hard}; // создаем массив разных сложностей для лаб, 
																					//что бы каждый раз не писать сложность для лабы

	// ЛАБОРАТОРНАЯ РАБОТА № 2-3

	cout << "\n\n\nЛАБОРАТОРНАЯ РАБОТА № 2-3\n\n";

	delivery_lab_work lab_work(mathematic, count_lab, difficulty_lab_work); // Используем конструктор с тремя параметрами

	cout << "Кол-во выполненых заданий:" << lab_work.get_count_completed_lab_work() << endl;
	cout << "Кол-во лабораторных работ: " << lab_work.get_count_lab_work() << endl;
	cout << "Оценка по дисциплине: " << lab_work.get_evaluation_dissepline() << endl;

	lab_work.enter_info_lab(3, 5);
	lab_work.print_information_discipline();

	cout << endl;
	lab_work[2] = 4; // Вызываем перегрузку оператора [] и присваиваем 3-ей лабораторной оценку 4
	cout << lab_work; // Вызываем перегрузку оператора << и выводим то, как мы его перегрузили

	int a = 0;
	a += lab_work; // Вызываем перегрузку оператора +=

	cout << endl << endl << "Кол-во не сданных лабораторных работ: " << a << endl; 


	// Создаем новый объект класса для использования конструктора с двумя параметрами
	delivery_lab_work labs(programing, 3);
	cout << labs; // Используем перегрузкку оператора <<


	// ЛАБОРАТОРНАЯ №4

	/*
		В данной лабораторной рвботе были сделаны мзменения:

		- Создан дополнительный производный класс "Student_Lab_Work"
		- Созданы два файла в "Student_Lab_Work.h" и "Student_Lab_Work.cpp"
		- В "Student_Lab_Work.h" реализованы шаблоны методов для этого класса созданы переменные для отчета и массив для хранения данных об отчете
		- В "Student_Lab_Work.cpp" реализация шаблонов методов, прописана вся логика этих методов, контсруктора и деструктора
		- В файле "lab_work.cpp", т.е. main, создан объект производного класса, в который передаем необходимые параметры в конструктор данного класса
		- Так же в main использовались новый метод в производном классе и переопределенные методы вывода и отметки сдачи лабы из базового класса delivery_lab_work
	*/

	cout << "\n\n\n ЛАБОРАТОРНАЯ №4 \n\n";

	Student_Lab_Work stud_lab(informatic, 4, difficulty_lab_work); // создаем объект производного класса

	stud_lab.set_true_otchet(3); // Устанавливаем что по последней лаборатоной работе отчет сдан
	stud_lab.enter_info_lab(3, 5); // Устанавливаем оценку и что сдана лабораторная работа
	stud_lab.print_information_discipline(); // выводим все наши данный о дисциплине на консоль
	

	// ЛАБОРАТОРНАЯ №5

	/*
		В данной лабораторной рвботе были сделаны мзменения:

		- Создан доп класс Interface_Lab_work и файл "Interface_Lab_work.h" в которых были созданы виртуальныее мтод и перегрузка для дальнейшего их переопределения в других классах
		- В базовом и производном классе были добавлены ключевые слова override для print_information_discipline() вместо virtual, для того чтобы этот метод переопределить
		- В базовом классе для перегрузки опереатора [] было добавлено ключевое слово override
		- Созданы виртуальные деструкторы в каждом из классов для правильного даления памяти при уничтожении объектов созданных классов
		- В main создан объект интрефайса для того чтобы там хранить объекты базового и производного класса
		- Для объекта выделена динамическая память под для других объектов и создан цикл удаления памяти для объекта интерфейса
	*/

	cout << "\n\n\n ЛАБОРАТОРНАЯ №5 \n\n";

	const int kol_dis = 3; // Кол-во дисциплин, которые будет в нашем объекте интерфейса
	Interface_Lab_Work* dis[kol_dis]; // создаем объект интерфейса 

	dis[0] = new delivery_lab_work(mathematic, 4, difficulty_lab_work); // заполняем оъект интерфейса объектом базового класса
	dis[1] = new delivery_lab_work(programing, 7, difficulty_lab_work);
	dis[2] = new Student_Lab_Work(informatic, 2, difficulty_lab_work); // заполняем оъект интерфейса объектом производного класса

	dis[0]->print_information_discipline(); // выводим на консоль данный по 1-ому объекту 
	dis[2]->operator[](1) = 5; // Используем перегрузку для объекта производного класса и приваеваем последней лабе оценку 5
	dis[2]->print_information_discipline(); // выводим наши параметры

	for (int i = 0; i < kol_dis; i++)
	{
		delete dis[i];
	}


	// ЛАБОРАТОРНАЯ №6

	/*
		В данной лабораторной рвботе были сделаны мзменения:

		- Создан отдельный файл "Shablone_Lab.h" для создания там шаблона на основе базового класса, вся реализация класса бал в .h файле, а не раздлене на 2, потому что шаблон так не будет работать
		- В самом шаблонном классе была доавлена в начале классса строка template "<typename T>" для того что бы создать самшаблонный класс
		- Тип возращаемого значения в методе "get_evaluation_dissepline()" и переменной "evaluation_dissepline" были изменены на тип значения класса, то есть "T"
		- В main было создано два объекта шаблонного класса "sh_lab" и "sh_lab2",в первом значение оценки по дисциплине будет возращаться типом float
		  во стором "sh_lab2", будет возращаться оценка по дисциплине типа int
		- Так же был произведен вывод одного и второго объекта на консоль при помощи метода "print_information_discipline()"	
	*/

	cout << "\n\n\n ЛАБОРАТОРНАЯ №6 \n\n";

	Shablone_Lab <float> sh_lab(informatic, 5, difficulty_lab_work); // Создаем объект шаблонного класса в котором говорим что оценка по дисциплине буде считатья типа значения float

	sh_lab.enter_info_lab(3, 5); // Устанавливаем оцнеки к определенным лабам
	sh_lab.enter_info_lab(1, 2); // Устанавливаем оцнеки к определенным лабам

	sh_lab.print_information_discipline(); // выводим получившийся результат


	// Показываем что работает с типом данных int
	Shablone_Lab <int> sh_lab2(programing, 5, difficulty_lab_work); // Создаем объект шаблонного класса в котором говорим что оценка по дисциплине буде считатья типа значения int

	sh_lab2.enter_info_lab(3, 2); // Устанавливаем оцнеки к определенным лабам
	sh_lab2.enter_info_lab(1, 4); // Устанавливаем оцнеки к определенным лабам
	sh_lab2.enter_info_lab(0, 5); // Устанавливаем оцнеки к определенным лабам

	sh_lab2.print_information_discipline(); // выводим получившийся результат

	return 0;
}